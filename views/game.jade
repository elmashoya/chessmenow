#tablearea
  #top-side.color-info
    span.b-player Black
    span.time-left 5:00
  .clear
  #container-chessboard
    #chessboard
    button#choose-w.choose White
    button#choose-b.choose Black
  #container-info
    #container-move-list
      #move-list
        - each move,i in game_state.moves
          .move-row
            span.move-num #{parseInt(i)+1}.
            span.move= move[0]
            - if (move[1])
              span.move= move[1]
    #container-misc
      #container-captured
        #captured-white-pieces
        #captured-black-pieces
      #container-buttons
        button#resign Resign
        button#draw Draw
        button#rematch Rematch
    .clear
    #container-chat
      #chat-window
        - each message in messages
          .chat-row
            - if (message.type === 'chat')
              span.chat-name #{message.user}: 
              span.chat-text= message.text
            - else if (message.type === 'color')
              span.chat-announcement= message.text
            - else if (message.type === 'announcement')
              span.chat-announcement= message.text
            - else if (message.type === 'game')
              span.chat-game= message.text
            - else if (message.type === 'error')
              span.chat-error= message.text
      form#chat
        input(type="text")#chat-input
  .clear
  #bottom-side.color-info
    span.w-player White
    span.time-left 5:00
  .clear
.clear
#announcement-area
  h2#info

script(type="text/javascript", src="/media/js/chessboard.js")
:javascript
  | var host = "#{host}";
  | var game_id = "#{game_id}";
  | var state = "#{state}";
  | var chosen_colors = !{JSON.stringify(chosen_colors)};
  | var game_state = !{JSON.stringify(game_state)};
  | var player_state = !{JSON.stringify(player_state)};

  | var a = new ApplicationView({ model: new Application() });
  | a.model.loadFen(game_state.fen);
  | a.highlightMove(game_state.last_move);
